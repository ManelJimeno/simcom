name: "Build binaries on ubuntu, windows, and macos"
on:
  push:
    branches:
      - main
    tags:
      - "^v(?:[0-9]+\\.?)+$"
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019]
        # os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Install software in Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy
          whereis gcc
      - name: Install software in macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install llvm
          ln -s "$(brew --prefix llvm)/bin/clang-format" "/usr/local/bin/clang-format"
          ln -s "$(brew --prefix llvm)/bin/clang-tidy" "/usr/local/bin/clang-tidy"
          ln -s "$(brew --prefix llvm)/bin/clang-apply-replacements" "/usr/local/bin/clang-apply-replacements"
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Setup cmake 3.23
        uses: jwlawson/actions-setup-cmake@v1.12
        with:
          cmake-version: '3.23.x'
      - name : list docker installed packages (informative)
        run: |
          python --version
          gcc --version
          clang-format --version
          clang-tidy --version
          cmake --version
      - name: Set up Python packages
        run: |
          python -m pip install --upgrade conan
      - name: Build and test in Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PWD/build/bin/lib
          cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc
          cmake --build build
          cmake --build build --target test
      - name: Build and test in macOS
        if: matrix.os == 'macos-latest'
        run: |
          cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release
          cmake --build build
          cmake --build build --target test
      - name: Build and test in Windows
        if: matrix.os == 'windows-2019'
        run: |
          .\build_simcom.bat
